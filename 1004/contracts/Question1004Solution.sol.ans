// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

abstract contract InsuranceBase {
    function getDepositTimestamp(
        address _poolAddress,
        address _policyHolder
    ) external view virtual returns (uint256);

    function getPoolCreatedTimestamp(
        address _poolAddress
    ) external view virtual returns (uint256);

    function getFundOfInsurerInPool(
        address _poolAddress,
        address _policyHolder
    ) external view virtual returns (uint256);

    function getPolicyCoverageAmountInPool(
        address _poolAddress,
        address _policyHolder
    ) external view virtual returns (uint256);

    function isPolicyIsApproved(
        address _poolAddress,
        address _policyHolder
    ) external view virtual returns (bool);

    function addOneYearInsurancePool(address _poolAddress) external virtual;

    function calculatePremium(
        uint256 _coverageAmount,
        address _poolAddress
    ) public view virtual returns (uint256 premium);

    function insure(
        uint256 _coverageAmount,
        address _poolAddress
    ) external payable virtual;

    function depositFunds(address _poolAddress) external payable virtual;

    function claimPremium(address _poolAddress) external virtual;

    function approveClaimCoverage(
        address _poolAddress,
        address _policyHolder
    ) external virtual;

    function claimCoverage(address _poolAddress) external virtual;
}

contract Question1004Solution is InsuranceBase {
    struct InsurancePool {
        address poolAddress;
        uint256 currentCoverage;
        uint256 coverageApproved;
        uint256 premiumCollected;
        uint256 currentFunding;
        uint256 creationTimestamp;
    }

    struct PolicyHolder {
        uint256 coverageAmount;
        uint256 premiumPaid;
        bool claimApproved;
    }

    struct Insurer {
        uint256 funds;
        uint256 lastDepositTimestamp;
    }

    mapping(address => mapping(address => Insurer)) public insurers; // Mapping of pool address to insurer address to Insurer struct
    mapping(address => InsurancePool) public insurancePools;
    mapping(address => mapping(address => PolicyHolder)) public policyHolders;

    address public owner;
    bool private locked;
    uint256 public constant BASE_RATE = 1; // Example base rate of 1%
    uint256 public constant ONE_YEAR = 365 days;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    modifier reentryGuard() {
        require(!locked, "Reentrant call detected");
        locked = true;
        _;
        locked = false;
    }

    constructor() {
        owner = msg.sender;
    }

    function getDepositTimestamp(
        address _poolAddress,
        address _policyHolder
    ) external view override returns (uint256) {
        return insurers[_poolAddress][_policyHolder].lastDepositTimestamp;
    }

    function getPoolCreatedTimestamp(
        address _poolAddress
    ) external view override returns (uint256) {
        return insurancePools[_poolAddress].creationTimestamp;
    }

    function getFundOfInsurerInPool(
        address _poolAddress,
        address _policyHolder
    ) external view override returns (uint256) {
        return insurers[_poolAddress][_policyHolder].funds;
    }

    function getPolicyCoverageAmountInPool(
        address _poolAddress,
        address _policyHolder
    ) external view override returns (uint256) {
        return policyHolders[_poolAddress][_policyHolder].coverageAmount;
    }

    function isPolicyIsApproved(
        address _poolAddress,
        address _policyHolder
    ) external view override returns (bool) {
        return policyHolders[_poolAddress][_policyHolder].claimApproved;
    }

    function addOneYearInsurancePool(
        address _poolAddress
    ) external override onlyOwner {
        InsurancePool memory newPool = InsurancePool({
            poolAddress: _poolAddress,
            currentCoverage: 0,
            coverageApproved: 0,
            premiumCollected: 0,
            currentFunding: 0,
            creationTimestamp: block.timestamp
        });
        insurancePools[_poolAddress] = newPool;
    }

    function calculatePremium(
        uint256 _coverageAmount,
        address _poolAddress
    ) public view override returns (uint256 premium) {
        InsurancePool storage pool = insurancePools[_poolAddress];
        uint o_safeTier = (_coverageAmount * 995) / 1000;
        uint newCoverage = (pool.currentCoverage + _coverageAmount);
        if (newCoverage > pool.currentFunding) {
            return 0;
        }
        uint safeTier = (newCoverage * 995) / 1000;
        uint256 capitalRatio = (_coverageAmount *
            (pool.currentFunding - o_safeTier)) /
            (pool.currentFunding - safeTier);
        premium = (_coverageAmount * (BASE_RATE) + capitalRatio) / 100;
    }

    function insure(
        uint256 _coverageAmount,
        address _poolAddress
    ) external payable override reentryGuard {
        uint256 premium = calculatePremium(_coverageAmount, _poolAddress);
        require(msg.value == premium, "Insufficient premium");

        InsurancePool storage pool = insurancePools[_poolAddress];
        require(
            pool.currentFunding >= (pool.currentCoverage + _coverageAmount),
            "Coverage exceeds max limit"
        );
        pool.premiumCollected += premium;
        pool.currentCoverage += _coverageAmount;

        PolicyHolder storage holder = policyHolders[_poolAddress][msg.sender];
        require(holder.claimApproved == false, "Policy already approved");
        holder.coverageAmount += _coverageAmount;
        holder.premiumPaid += premium;
        holder.claimApproved = false;
    }

    function depositFunds(address _poolAddress) external payable override {
        Insurer storage insurer = insurers[_poolAddress][msg.sender];
        require(insurer.funds == 0, "only deposit once");
        insurer.funds = msg.value;
        insurer.lastDepositTimestamp = block.timestamp;
        insurancePools[_poolAddress].currentFunding += msg.value;
    }

    function claimPremium(address _poolAddress) external override reentryGuard {
        InsurancePool storage pool = insurancePools[_poolAddress];
        uint256 toDate = pool.creationTimestamp + ONE_YEAR;
        require(block.timestamp > toDate, "pool is not end");
        Insurer storage insurer = insurers[_poolAddress][msg.sender];
        require(insurer.funds > 0, "No funds available");

        uint256 premiumShareFee = pool.premiumCollected / 2;
        uint256 eligiblePremium = (premiumShareFee * insurer.funds) /
            pool.currentFunding;
        uint256 timeElapsed = toDate - insurer.lastDepositTimestamp;
        uint256 share = (eligiblePremium * timeElapsed) / (ONE_YEAR);
        uint256 surFunds = (insurer.funds *
            (pool.currentFunding - pool.coverageApproved)) /
            pool.currentFunding;
        insurer.funds = 0;
        (bool success, ) = payable(msg.sender).call{value: share + surFunds}(
            ""
        );
        require(success, "Transfer failed");
    }

    function approveClaimCoverage(
        address _poolAddress,
        address _policyHolder
    ) external override onlyOwner {
        PolicyHolder storage holder = policyHolders[_poolAddress][
            _policyHolder
        ];
        require(holder.coverageAmount > 0, "No coverage available");
        insurancePools[_poolAddress].coverageApproved += holder.coverageAmount;
        holder.claimApproved = true;
    }

    function claimCoverage(
        address _poolAddress
    ) external override reentryGuard {
        PolicyHolder storage holder = policyHolders[_poolAddress][msg.sender];
        require(holder.coverageAmount > 0, "No coverage available");
        require(holder.claimApproved, "Claim not approved");
        uint256 coverageAmount = holder.coverageAmount;
        holder.coverageAmount = 0;
        (bool success, ) = payable(msg.sender).call{value: coverageAmount}("");
        require(success, "Transfer failed.");
    }
}
