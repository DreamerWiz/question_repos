// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Question0002Solution is ERC20, Ownable {
    mapping(address => uint256) public lockUntil;

    constructor() ERC20("MyToken", "MTK") {}

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function addLock(address to, uint256 lockTime) public onlyOwner {
        lockUntil[to] = block.timestamp + lockTime;
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(block.timestamp >= lockUntil[msg.sender], "Tokens are locked");
        return super.transfer(recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(block.timestamp >= lockUntil[sender], "Tokens are locked");
        return super.transferFrom(sender, recipient, amount);
    }
}
